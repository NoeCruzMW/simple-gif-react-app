{"version":3,"sources":["extensions/Strings.js","components/AddCategory.js","config/APIs.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["String","prototype","format","i","args","arguments","this","replace","AddCategory","setCategories","useState","inputValue","errorMessage","data","setData","onSubmit","e","preventDefault","trim","length","cats","type","className","placeholder","onChange","target","value","URLS","API_GIF","getGifs","category","a","url","encodeURI","fetch","resp","json","gifs","map","img","id","title","images","downsized_medium","console","error","GifGridItem","alt","src","width","GifGrid","props","loading","state","setState","useEffect","useFetchGifs","key","GifExpertApp","categories","index","ReactDOM","render","document","getElementById"],"mappings":"iKACAA,OAAOC,UAAUC,OAAS,WACtB,IAAIC,EAAI,EAAGC,EAAOC,UAClB,OAAOC,KAAKC,QAAQ,OAAO,WACzB,MAAyB,oBAAXH,EAAKD,GAAoBC,EAAKD,KAAO,Q,wGCD5CK,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACxBC,mBAAS,CAAEC,WAAY,GAAIC,aAAc,KADjB,mBACzCC,EADyC,KACnCC,EADmC,KAkBhD,OACE,0BAAMC,SAbiB,SAACC,GACxBA,EAAEC,iBACEJ,EAAKF,WAAWO,OAAOC,OAAS,GAClCV,GAAc,SAACW,GAAD,OAAWP,EAAKF,YAAhB,mBAA8BS,OAC5CN,EAAQ,CAAEF,aAAc,GAAID,WAAY,MAExCG,EAAQ,2BACHD,GADE,IAELD,aAAc,iDAMhB,2BACES,KAAK,OACLC,UAAU,YACVC,YAAY,uBACZC,SArBoB,SAACR,GAAD,OACxBF,EAAQ,2BAAKD,GAAN,IAAYF,WAAYK,EAAES,OAAOC,UAqBpCA,MAAOb,EAAKF,aAEd,2BAAOW,UAAU,gBAAgBT,EAAKD,gB,uBC9B/Be,EAAO,CAChBC,QAAO,+FCCEC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,sEAEXC,EAAML,EAAKC,QAAQ1B,OAAO+B,UAAUH,IAFzB,SAGEI,MAAMF,GAHR,cAGXG,EAHW,gBAIMA,EAAKC,OAJX,uBAITvB,EAJS,EAITA,KACFwB,EAAOxB,EAAKyB,KAAI,SAACC,GAAD,YAAU,CAC9BC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,QARnB,kBAUVK,GAVU,kCAYjBO,QAAQC,MAAR,MAZiB,0DAAH,sDCAPC,EAAc,SAAC,GAAqB,EAApBN,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOT,EAAS,EAATA,IACpC,OACI,yBAAKV,UAAU,0CACX,yBAAKyB,IAAK,MAAOC,IAAKhB,EAAKiB,MAAO,MAClC,+BAAQR,KCFPS,EAAU,SAACC,GAAW,IAAD,ECDN,SAACrB,GAAc,IAAD,EACdpB,mBAAS,CACjCG,KAAM,GACNuC,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAaxC,OAPAC,qBAAU,YACR,uCAAC,4BAAAxB,EAAA,sEACoBF,EAAQC,GAD5B,OACOO,EADP,OAECiB,EAAS,CAAEF,SAAS,EAAOvC,KAAMwB,IAFlC,2CAAD,yDAIC,CAACP,IAEGuB,EDX2BG,CAAaL,EAAMrB,UAA7CsB,EADwB,EACxBA,QAAeV,EADS,EACf7B,KAEjB,OACE,oCACE,wBAAIS,UAAU,uCAAuC6B,EAAMrB,UAC3D,0BAAMR,UAAU,oCAAoC8B,GAAW,eAC/D,yBAAK9B,UAAU,aACZoB,EAAOJ,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,eAAakB,IAAKlB,EAAIC,IAAQD,UET3BmB,EAAe,WAAO,IAAD,EACIhD,mBAAS,CAAC,gBADd,mBACzBiD,EADyB,KACblD,EADa,KAiBhC,OACE,oCACE,4BAAQa,UAAU,UAChB,4CACA,kBAAC,EAAD,CAAab,cAAeA,KAE9B,4BACGkD,EAAWrB,KAAI,SAACR,EAAU8B,GAAX,OACd,kBAAC,EAAD,CAASH,IAAK3B,EAAUA,SAAUA,U,MCtB5C+B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.f083270c.chunk.js","sourcesContent":["// eslint no-extend-native: [\"error\", { \"exceptions\": [\"Object\"] }]\r\nString.prototype.format = function () {\r\n    var i = 0, args = arguments;\r\n    return this.replace(/{}/g, function () {\r\n      return typeof args[i] != 'undefined' ? args[i++] : '';\r\n    });\r\n  };\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [data, setData] = useState({ inputValue: \"\", errorMessage: \"\" });\r\n\r\n  const handleInputChange = (e) =>\r\n    setData({ ...data, inputValue: e.target.value });\r\n\r\n  const handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (data.inputValue.trim().length > 3) {\r\n      setCategories((cats) => [data.inputValue,...cats]);\r\n      setData({ errorMessage: \"\", inputValue: \"\" });\r\n    } else {\r\n      setData({\r\n        ...data,\r\n        errorMessage: \"Category name must have more than 3 chars\",\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <form onSubmit={handleFormSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        className=\"input-gif\"\r\n        placeholder=\"Enter a new category\"\r\n        onChange={handleInputChange}\r\n        value={data.inputValue}\r\n      />\r\n      <small className=\"errorMessage\">{data.errorMessage}</small>\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","export const URLS = {\r\n    API_GIF : `https://api.giphy.com/v1/gifs/search?q={}&limit=10&api_key=AEHDVsYTYZpSYSpcKY2XL4hZIx0YOpMn`\r\n}","import { URLS } from \"../config/APIs\";\r\n\r\nexport const getGifs = async (category) => {\r\n    try {\r\n      const url = URLS.API_GIF.format(encodeURI(category));\r\n      const resp = await fetch(url);\r\n      const { data } = await resp.json();\r\n      const gifs = data.map((img) => ({\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      }));\r\n      return gifs;\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img alt={'IMG'} src={url} width={150}/>\r\n            <small>{title}</small>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = (props) => {\r\n  const { loading, data: images } = useFetchGifs(props.category);\r\n\r\n  return (\r\n    <>\r\n      <h1 className=\"animate__animated animate__bounceIn\">{props.category}</h1>\r\n      <span className=\"animate__animated animate__flash\">{loading && \"Cargando...\"}</span>\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n  //Se inova solo cuando la category cambia\r\n  useEffect(() => {\r\n    (async function get() {\r\n      const gifs = await getGifs(category);\r\n      setState({ loading: false, data: gifs });\r\n    })();\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./AddCategory\";\r\nimport { GifGrid } from \"./GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"Dragon Ball\"]);\r\n  /**\r\n   * Version 1\r\n   */\r\n  // const handleAddCategory = ()=>{\r\n  //     const category = prompt(\"Enter a new category: \");\r\n  //     setCategories([...categories,category]);\r\n  // }\r\n\r\n  // /**\r\n  //  * V2\r\n  //  */\r\n  // const handleAddCategoryv2 = ()=>{\r\n  //     const category = prompt(\"Enter a new category: \");\r\n  //     setCategories(categories => [...categories,category]);\r\n  // }\r\n  return (\r\n    <>\r\n      <header className=\"header\">\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setCategories={setCategories} />\r\n      </header>\r\n      <ul>\r\n        {categories.map((category, index) => (\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './components/GifExpertApp';\nimport './extensions/Strings';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}